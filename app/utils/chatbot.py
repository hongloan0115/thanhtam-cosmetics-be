from app.core.logger import get_logger
import json
from enum import Enum
from app.core.openai_client import call_gpt, classify_question_with_ai
from app.crud.product import search_products, get_products_for_context, get_products_with_details

logger = get_logger(__name__)

class QuestionType(Enum):
    SEARCH_PRODUCTS = "search_products"  # T√¨m ki·∫øm s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch
    PRODUCT_ADVICE = "product_advice"    # T∆∞ v·∫•n s·∫£n ph·∫©m c·∫ßn context t·ª´ DB
    GENERAL_INFO = "general_info"        # Th√¥ng tin chung v·ªÅ c·ª≠a h√†ng
    UNRELATED = "unrelated"              # C√¢u h·ªèi kh√¥ng li√™n quan

def classify_question(message: str) -> QuestionType:
    """S·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n lo·∫°i c√¢u h·ªèi thay v√¨ t·ª´ kh√≥a"""
    try:
        ai_classification = classify_question_with_ai(message)
        
        # Map AI response to enum
        classification_map = {
            "search_products": QuestionType.SEARCH_PRODUCTS,
            "product_advice": QuestionType.PRODUCT_ADVICE,
            "general_info": QuestionType.GENERAL_INFO,
            "unrelated": QuestionType.UNRELATED
        }
        
        return classification_map.get(ai_classification, QuestionType.GENERAL_INFO)
        
    except Exception as e:
        logger.error(f"Error in question classification: {e}")
        return QuestionType.GENERAL_INFO  # Default fallback

def format_product_response(product):
    """Format product information for user display"""
    response = f"üì¶ {product['tenSanPham']}\nüí∞ Gi√°: {product['giaBan']:,}ƒë"
    
    if product['hinhAnh']:
        response += f"\nüñºÔ∏è H√¨nh ·∫£nh: {product['hinhAnh']}"
    
    response += f"\nüîó Xem chi ti·∫øt: {product['link']}"
    return response

def handle_search_products(message: str, db):
    """X·ª≠ l√Ω c√¢u h·ªèi t√¨m ki·∫øm s·∫£n ph·∫©m"""
    logger.info("Handling search products question")
    gpt_response = call_gpt(message)
    
    func_call = gpt_response.get("function_call")
    if func_call:
        func_name = func_call.get("name")
        
        try:
            args = json.loads(func_call.get("arguments", "{}"))
            
            if func_name == "search_products":
                products = get_products_with_details(db, daXoa=False, **args)
                
                if not products:
                    return [
                        "ƒê·ªÉ t√¥i t√¨m ki·∫øm s·∫£n ph·∫©m cho b·∫°n...",
                        "R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."
                    ]
                
                # Ph·∫£n h·ªìi t·ª± nhi√™n tr∆∞·ªõc k·∫øt qu·∫£
                natural_response = "ƒê·ªÉ t√¥i t√¨m ki·∫øm s·∫£n ph·∫©m cho b·∫°n..."
                result = [natural_response, f"T√¥i t√¨m th·∫•y {len(products)} s·∫£n ph·∫©m ph√π h·ª£p:"]
                result.extend([format_product_response(p) for p in products])
                return result
                
            elif func_name == "check_product_existence":
                from app.crud.product import check_products_exist, get_basic_products_info
                keywords = args.get("keywords", [])
                
                # Ph·∫£n h·ªìi t·ª± nhi√™n ƒë·∫ßu ti√™n
                checking_response = "ƒê·ªÉ t√¥i ki·ªÉm tra xem c·ª≠a h√†ng c√≥ s·∫£n ph·∫©m n√†y kh√¥ng..."
                
                existence_info = check_products_exist(db, keywords=keywords, daXoa=False)
                
                if existence_info["has_products"]:
                    products = get_basic_products_info(db, keywords=keywords, limit=5, daXoa=False)
                    
                    from app.core.openai_client import call_gpt_with_product_info
                    ai_response = call_gpt_with_product_info(
                        message, 
                        existence_info["count"], 
                        existence_info["has_products"]
                    )
                    
                    result = [
                        checking_response,
                        ai_response.get("content", "C√≥, c·ª≠a h√†ng c√≥ nh·ªØng s·∫£n ph·∫©m n√†y:")
                    ]
                    result.extend([format_product_response(p) for p in products])
                    return result
                else:
                    from app.core.openai_client import call_gpt_with_product_info
                    ai_response = call_gpt_with_product_info(message, 0, False)
                    return [
                        checking_response,
                        ai_response.get("content", "R·∫•t ti·∫øc, hi·ªán t·∫°i c·ª≠a h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m n√†y.")
                    ]
                    
        except Exception as e:
            logger.error(f"Error processing search: {e}")
            return [
                "ƒê·ªÉ t√¥i t√¨m ki·∫øm cho b·∫°n...",
                "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i."
            ]
    
    return [gpt_response.get("content", "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm s·∫£n ph·∫©m. H√£y cho t√¥i bi·∫øt b·∫°n ƒëang t√¨m g√¨?")]

def handle_product_advice(message: str, db):
    """X·ª≠ l√Ω c√¢u h·ªèi t∆∞ v·∫•n s·∫£n ph·∫©m"""
    logger.info("Handling product advice question")
    gpt_response = call_gpt(message)
    
    func_call = gpt_response.get("function_call")
    if func_call and func_call.get("name") == "get_product_context":
        try:
            args = json.loads(func_call.get("arguments", "{}"))
            keywords = args.get("keywords", [])
            
            # Ph·∫£n h·ªìi t·ª± nhi√™n ƒë·∫ßu ti√™n
            thinking_response = "ƒê·ªÉ t√¥i t√¨m hi·ªÉu v√† t∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p cho b·∫°n..."
            
            context_data = get_products_for_context(db, keywords, daXoa=False)
            
            if context_data:
                advice_response = call_gpt(message, context_data)
                
                # L·∫•y m·ªôt v√†i s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã k√®m theo l·ªùi t∆∞ v·∫•n
                from app.crud.product import get_basic_products_info
                products = get_basic_products_info(db, keywords=keywords, limit=3, daXoa=False)
                result = [
                    thinking_response,
                    advice_response.get("content", "D·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m, t√¥i khuy√™n b·∫°n n√™n...")
                ]
                
                if products:
                    result.append("M·ªôt s·ªë s·∫£n ph·∫©m t√¥i g·ª£i √Ω:")
                    result.extend([format_product_response(p) for p in products])
                
                return result
            else:
                return [
                    thinking_response,
                    "T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ s·∫£n ph·∫©m b·∫°n quan t√¢m. B·∫°n c√≥ th·ªÉ cung c·∫•p th√™m chi ti·∫øt kh√¥ng?"
                ]
        except Exception as e:
            logger.error(f"Error processing advice: {e}")
            return [
                "ƒê·ªÉ t√¥i t∆∞ v·∫•n cho b·∫°n...",
                "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω t∆∞ v·∫•n. Vui l√≤ng th·ª≠ l·∫°i."
            ]
    
    return [gpt_response.get("content", "T√¥i c√≥ th·ªÉ t∆∞ v·∫•n s·∫£n ph·∫©m cho b·∫°n. H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn t∆∞ v·∫•n g√¨?")]

def handle_general_info(message: str):
    """X·ª≠ l√Ω c√¢u h·ªèi th√¥ng tin chung"""
    logger.info("Handling general info question")
    gpt_response = call_gpt(message)
    return [gpt_response.get("content", "C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m ƒë·∫øn c·ª≠a h√†ng Thanh T√¢m.")]

def process_chat(message: str, db):
    logger.info(f"Processing chat message: {message}")
    
    question_type = classify_question(message)
    logger.info(f"Question classified as: {question_type.value}")
    
    try:
        if question_type == QuestionType.SEARCH_PRODUCTS:
            return handle_search_products(message, db)
        elif question_type == QuestionType.PRODUCT_ADVICE:
            return handle_product_advice(message, db)
        elif question_type == QuestionType.GENERAL_INFO:
            return handle_general_info(message)
        else:
            return ["T√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn c·ª≠a h√†ng m·ªπ ph·∫©m Thanh T√¢m. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m, gi√° c·∫£, ho·∫∑c d·ªãch v·ª• c·ªßa ch√∫ng t√¥i."]
    except Exception as e:
        logger.error(f"Error in process_chat: {e}")
        return ["Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau."]
